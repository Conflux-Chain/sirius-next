{"version":3,"sources":["../../src/utils/address.test.ts"],"sourcesContent":["import {\n  isPosAddress,\n  isCfxHexAddress,\n  isBase32Address,\n  isZeroAddress,\n  isSimplyBase32Address,\n  isAddress,\n  formatAddress,\n} from './address';\n\ndescribe('isCfxHexAddress', () => {\n  test('ADMINE_CONTROL_HEX_ADDRESS', () => {\n    expect(isCfxHexAddress('0x0888000000000000000000000000000000000000')).toBe(\n      true,\n    );\n  });\n\n  test('SPONSOR_WHITELIST_CONTROL_HEX_ADDRESS', () => {\n    expect(isCfxHexAddress('0x0888000000000000000000000000000000000001')).toBe(\n      true,\n    );\n  });\n\n  test('STAKING_HEX_ADDRESS', () => {\n    expect(isCfxHexAddress('0x0888000000000000000000000000000000000002')).toBe(\n      true,\n    );\n  });\n\n  test('Faild STAKING_HEX_ADDRESS', () => {\n    expect(isCfxHexAddress('0x0888000000000000000000000000000000000003')).toBe(\n      false,\n    );\n  });\n\n  test('isUserHexAddress', () => {\n    expect(isCfxHexAddress('0x1000000000000000000000000000000000000000')).toBe(\n      true,\n    );\n  });\n\n  test('Faild isUserHexAddress', () => {\n    expect(isCfxHexAddress('0x2000000000000000000000000000000000000000')).toBe(\n      false,\n    );\n  });\n\n  test('isContractAddress', () => {\n    expect(isCfxHexAddress('0x8000000000000000000000000000000000000000')).toBe(\n      true,\n    );\n  });\n\n  test('Faild isContractAddress', () => {\n    expect(isCfxHexAddress('0x9000000000000000000000000000000000000000')).toBe(\n      false,\n    );\n  });\n\n  test('isNullHexAddress', () => {\n    expect(isCfxHexAddress('0x0000000000000000000000000000000000000000')).toBe(\n      true,\n    );\n  });\n\n  test('Faild isNullHexAddress', () => {\n    expect(isCfxHexAddress('0x0')).toBe(false);\n  });\n\n  test('Faild isNullHexAddress', () => {\n    expect(isCfxHexAddress('0')).toBe(false);\n  });\n\n  test('Faild isBase32Address', () => {\n    expect(\n      isCfxHexAddress('cfx:aaketjh9tkj5g2k4zx3kfvb9vkku8nr956n0en4fhe'),\n    ).toBe(false);\n  });\n\n  test('Faild isBase32Address', () => {\n    expect(isCfxHexAddress('0xd1937ffd52e18ae3fcd64302ddbf3b04d712e846')).toBe(\n      false,\n    );\n  });\n});\n\ndescribe('isBase32Address', () => {\n  test('isBase32Address', () => {\n    expect(\n      isBase32Address('cfx:aaketjh9tkj5g2k4zx3kfvb9vkku8nr956n0en4fhe'),\n    ).toBe(true);\n  });\n  test('isBase32Address', () => {\n    expect(\n      isBase32Address('cfxtest:aaprg5pk4ykdg3udrefh71s0yphg4dnvh61mgvfgda'),\n    ).toBe(true);\n  });\n  test('isBase32Addres', () => {\n    expect(isBase32Address('0xd1937ffd52e18ae3fcd64302ddbf3b04d712e846')).toBe(\n      false,\n    );\n  });\n});\n\ndescribe('isPosAddress', () => {\n  test('should return true for a valid PoS address', () => {\n    const validAddress = '0x' + 'a'.repeat(64);\n    expect(isPosAddress(validAddress)).toBe(true);\n  });\n\n  test('should return false for an address not starting with 0x', () => {\n    const invalidAddress = '1x' + 'a'.repeat(64);\n    expect(isPosAddress(invalidAddress)).toBe(false);\n  });\n\n  test('should return false for an address with incorrect length', () => {\n    const tooLongAddress = '0x' + 'a'.repeat(65);\n    const tooShortAddress = '0x' + 'a'.repeat(63);\n    expect(isPosAddress(tooLongAddress)).toBe(false);\n    expect(isPosAddress(tooShortAddress)).toBe(false);\n  });\n\n  test('should return false for an empty string', () => {\n    expect(isPosAddress('')).toBe(false);\n  });\n\n  test('should return true for a string starting with 0x but containing non-hex characters', () => {\n    const nonHexCharsAddress = '0x' + 'g'.repeat(64);\n    expect(isPosAddress(nonHexCharsAddress)).toBe(true);\n  });\n});\n\ndescribe('isZeroAddress', () => {\n  test('returns true for known zero address', () => {\n    const address = '0x0000000000000000000000000000000000000000';\n    expect(isZeroAddress(address)).toBe(true);\n  });\n\n  test('returns false for non-zero address', () => {\n    const address = '0x0000000000000000000000000000000000000001';\n    expect(isZeroAddress(address)).toBe(false);\n  });\n});\n\ndescribe('isSimplyBase32Address', () => {\n  test('returns true for known zero address', () => {\n    const address = '0x0000000000000000000000000000000000000000';\n    expect(isSimplyBase32Address(address)).toBe(false);\n  });\n\n  test('returns false for eoa address', () => {\n    const address = 'cfxtest:aaprg5pk4ykdg3udrefh71s0yphg4dnvh61mgvfgda';\n    expect(isSimplyBase32Address(address)).toBe(true);\n  });\n\n  test('returns false for contract address', () => {\n    const address = 'cfxtest:acgwa148z517jj15w9je5sdzn8p8j044kjrvjz92c1';\n    expect(isSimplyBase32Address(address)).toBe(true);\n  });\n});\n\ndescribe('isAddress', () => {\n  test('returns true for valid Hex address', () => {\n    const hexAddress = '0x14b2d3bc65e74dae1030eafd8ac30c533c976a9b';\n    expect(isAddress(hexAddress)).toBe(true);\n  });\n\n  test('returns false for invalid Hex address with wrong characters', () => {\n    const invalidHexAddress = '0x14b2d3bc65e74dae1030eafd8ac30c5ZZZc976a9b';\n    expect(isAddress(invalidHexAddress)).toBe(false);\n  });\n\n  test('returns false for Hex address with incorrect length', () => {\n    const shortHexAddress = '0x14b2d3';\n    expect(isAddress(shortHexAddress)).toBe(false);\n  });\n\n  test('returns true for valid Base32 address', () => {\n    const base32Address = 'cfx:aakwuegj5hm6cjm4d4w0aw9ygcsex2xdmjtpyseezs';\n    expect(isAddress(base32Address)).toBe(true);\n  });\n\n  test('returns false for invalid Base32 address with wrong characters', () => {\n    const invalidBase32Address =\n      'cfx:aakwuegj5hm6cjm4d4w0aw9ygcsex2xdmjtpyseez!';\n    expect(isAddress(invalidBase32Address)).toBe(false);\n  });\n\n  test('returns false for Base32 address with incorrect length', () => {\n    const shortBase32Address = 'cfx:aakwue';\n    expect(isAddress(shortBase32Address)).toBe(false);\n  });\n\n  test('returns false for empty string', () => {\n    expect(isAddress('')).toBe(false);\n  });\n\n  test('returns false for string not starting with 0x or cfx:', () => {\n    const randomString = '1x23456789abcdef';\n    expect(isAddress(randomString)).toBe(false);\n  });\n});\n\ndescribe('formatAddress', () => {\n  test('returns true for valid Hex address', () => {\n    const hexAddress = 'cfx:aaketjh9tkj5g2k4zx3kfvb9vkku8nr956n0en4fhe';\n    expect(formatAddress(hexAddress, 'base32')).toBe(\n      'cfx:aaketjh9tkj5g2k4zx3kfvb9vkku8nr956n0en4fhe',\n    );\n  });\n\n  test('should return true if its a valid ethereum address type', () => {\n    expect(\n      formatAddress('0x45Cd08334aeedd8a06265B2Ae302E3597d8fAA28', 'hex'),\n    ).toBe('0x45Cd08334aeedd8a06265B2Ae302E3597d8fAA28');\n  });\n\n  test('should return true if its a valid ethereum token', () => {\n    expect(\n      formatAddress('0x7d682e65efc5c13bf4e394b8f376c48e6bae0355', 'hex'),\n    ).toBe('0x7d682e65efc5c13bf4e394b8f376c48e6bae0355');\n  });\n\n  test('should return true if its a valid contract address type', () => {\n    expect(\n      formatAddress('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', 'hex'),\n    ).toBe('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984');\n  });\n\n  test('should return false when its a invalid address', () => {\n    expect(\n      formatAddress('0xC1912fEE45d61C87Cc5EA59DaE31190FFFFf232d', 'hex'),\n    ).toBe('0xC1912fEE45d61C87Cc5EA59DaE31190FFFFf232d');\n  });\n\n  test('should return false when its a invalid address', () => {\n    expect(\n      formatAddress(\n        '0x7d682e65efc5c13bf4e394b8f376c48e6bae0355'.toLocaleUpperCase(),\n        'hex',\n      ),\n    ).toBe('0X7D682E65EFC5C13BF4E394B8F376C48E6BAE0355');\n  });\n\n  test('should return false when its a invalid address', () => {\n    expect(formatAddress('0x0', 'hex')).toBe('0x0');\n  });\n\n  test('decodes an address', () => {\n    expect(\n      formatAddress('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY', 'hex'),\n    ).toBe('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY');\n  });\n\n  test('converts a publicKey (hex) as-is', () => {\n    expect(formatAddress('0x01020304', 'hex')).toBe('0x01020304');\n  });\n\n  test('decodes a 8-byte address', () => {\n    expect(formatAddress('848Gh2GcGaZia', 'hex')).toBe('848Gh2GcGaZia');\n  });\n});\n"],"mappings":"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","names":[]}