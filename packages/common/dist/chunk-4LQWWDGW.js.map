{"version":3,"sources":["../src/utils/index.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport dayjs from 'dayjs';\nimport useSWR from 'swr';\nimport qs from 'qs';\nimport { LOCALSTORAGE_KEYS_MAP } from './constants';\n\nexport const toThousands = (num: any, delimiter = ',', prevDelimiter = ',') => {\n  if ((typeof num !== 'number' || isNaN(num)) && typeof num !== 'string')\n    return '';\n  let str = num + '';\n  return str\n    .replace(new RegExp(prevDelimiter, 'igm'), '')\n    .split('.')\n    .reduce((acc, cur, index) => {\n      if (index) {\n        return `${acc}.${cur}`;\n      } else {\n        return cur.replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, `$1${delimiter}`);\n      }\n    }, '');\n};\n\nexport const getEllipsStr = (str: string, frontNum: number, endNum: number) => {\n  if (str) {\n    const length = str.length;\n    if (endNum === 0 && length <= frontNum) {\n      return str.substring(0, frontNum);\n    }\n    return (\n      str.substring(0, frontNum) +\n      '...' +\n      str.substring(length - endNum, length)\n    );\n  }\n  return '';\n};\n\nexport const tranferToLowerCase = (str: string) => {\n  return str ? str.toLowerCase() : '';\n};\n\nfunction hex2asc(pStr: string) {\n  let tempstr = '';\n  for (let b = 0; b < pStr.length; b += 2) {\n    tempstr += String.fromCharCode(parseInt(pStr.substr(b, 2), 16));\n  }\n  return tempstr;\n}\n\nexport const hex2utf8 = (pStr: string) => {\n  let tempstr = '';\n  try {\n    tempstr = decodeURIComponent(\n      pStr.replace(/\\s+/g, '').replace(/[0-9a-f]{2}/g, '%$&'),\n    );\n  } catch (err) {\n    tempstr = hex2asc(pStr);\n  }\n  return tempstr;\n};\n\n// alternative of String.prototype.replaceAll\nexport const replaceAll = (str: string, find: string, replace: string) => {\n  return str.replace(\n    new RegExp(find.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'),\n    replace,\n  );\n};\n\n/**\n * 格式化字符串，向下取整\n * @param {number|string} num 数字或字符串，应尽量使用字符串格式，数字格式如果长度超过 Number.MAX_SAFE_INTEGER 或 Number.MIN_SAFE_INTEGER 可能会有精度损失\n * @param {object} opt 配置参数\n * @returns {string} 格式化后字符串格式数字\n * @todo: 支持四舍五入，向上取整\n * @todo: 支持整数位小数设置精度\n * @todo: 支持负数格式化\n */\nexport const formatNumber = (num: number | string | BigNumber, opt?: any) => {\n  // 无法通过 bignumber.js 格式化的不处理\n  let bNum = new BigNumber(num).toFixed();\n  if (bNum === 'NaN') {\n    return '';\n  }\n  const option = {\n    precision: 3, // 保留小数精度数（注意整数位小数的精度固定为 3，原因是受千分符影响）\n    keepDecimal: true, // 是否保留小数位（注意如果整数部分带有小数位，则不保留实际小数位，原因是会显示两个小数点，会误解）\n    keepZero: false, // 是否保留小数位的 0（注意此配置优先级高于 precision，会清除 precision 添加的 0）\n    delimiter: ',', // 自定义分隔符\n    withUnit: true, // 是否显示单位\n    unit: '', // 指定单位\n    ...opt,\n  };\n  // 0. 定义返回值\n  let int = '';\n  let decimal = '';\n  let result = '';\n  /**\n   * 1. 定义单位\n   * K - kilo, 10³\n   * M - mega, 10⁶\n   * G - giga, 10⁹\n   * T - tera, 10¹²\n   * P - peta, 10¹⁵\n   * E - exa, 10¹⁸\n   * Z - zetta, 10²¹\n   * Y - yotta, 10²⁴\n   */\n  const UNITS = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n  // 2. 拆分出整数和小数，小数默认值为 0\n  const [intStr, decimalStr = '0'] = bNum.split('.');\n  // 3. 只能处理 27 位数的单位，大于 27 位的字符串从头部截断保留\n  // 3.1 获取大于小数点前 27 位的数字 intStrFront\n  let intStrFront = intStr ? intStr.slice(-Infinity, -27) : 0;\n  // 3.2 获取小数点前 27 位数字 intStrEnd\n  let intStrEnd = intStr ? intStr.slice(-27) : 0;\n  // 4. intStrEnd 转千分符形式\n  const intStrEndAfterToThousands = toThousands(intStrEnd, option.delimiter);\n  // 5. intStrEnd 添加单位，此处不对数字有效性做验证，即可能值为 100.000，100.000k 或 000.000Y\n  let intStrEndWithUnit = '';\n\n  if (option.withUnit === false) {\n    intStrEndWithUnit = intStrEndAfterToThousands;\n  } else {\n    let unitIndex = 1;\n    if (option.unit !== '' && UNITS.includes(option.unit)) {\n      unitIndex =\n        intStrEndAfterToThousands.split(option.delimiter).length -\n        UNITS.findIndex(u => u === option.unit);\n    }\n    if (unitIndex > 0) {\n      intStrEndWithUnit = intStrEndAfterToThousands\n        .split(option.delimiter)\n        .reduce((prev, curr, index, arr) => {\n          const len = arr.length;\n          // 无单位整数，为了后面方便处理统一格式\n          if (len === 1) {\n            return `${curr}.000`;\n          }\n          if (index === 0) {\n            return curr;\n          } else if (index === unitIndex) {\n            return `${prev}.${curr}${UNITS[len - index]}`;\n          } else if (index < unitIndex) {\n            return `${prev},${curr}`;\n          } else {\n            return prev;\n          }\n        }, '');\n    } else {\n      intStrEndWithUnit = intStrEndAfterToThousands;\n    }\n  }\n  // 6. 格式化整数\n  if (intStrFront) {\n    // 如果数字长度超过 27 位，则前面的数字用千分符分割\n    int = `${toThousands(intStrFront, option.delimiter)}${\n      option.delimiter\n    }${intStrEndWithUnit}`;\n  } else {\n    int = intStrEndWithUnit;\n  }\n  // 7. 格式化小数\n  decimal = new BigNumber(`0.${decimalStr}`).toPrecision(option.precision, 1);\n  // 8. 拼接整数，小数和单位\n  let unit = int.slice(-1);\n  let intWithoutUnit = int;\n  if (int && UNITS.includes(unit)) {\n    // 8.1 整数位包含单位，则不显示实际小数部分\n    if (option.keepDecimal) {\n      // 保留整数位整数 + 整数位小数\n      intWithoutUnit = int.slice(-Infinity, -1);\n    } else {\n      // 仅保留整数位整数\n      intWithoutUnit = intWithoutUnit.split('.')[0] || '';\n    }\n    result = `${intWithoutUnit}${unit}`;\n  } else {\n    unit = '';\n    // 8.2 整数位为 0 或无单位整数，拼接小数位\n    if (option.keepDecimal) {\n      result = new BigNumber(int.toString().replace(/,/g, ''))\n        .plus(new BigNumber(decimal))\n        .toFixed(option.precision, 1);\n    } else {\n      result = int.split('.')[0] || '';\n    }\n    intWithoutUnit = result;\n  }\n  // 9. 处理小数部分的 0\n  if (!option.keepZero) {\n    result = `${new BigNumber(\n      replaceAll(intWithoutUnit, option.delimiter, ''),\n    ).toFormat()}${unit}`;\n  }\n  // 10. 格式化千分符\n  result = toThousands(result);\n  return result;\n};\n\nexport const roundToFixedPrecision = (\n  number: number | string,\n  precision: number,\n  method: string = 'ROUND',\n) => {\n  if (number === '') {\n    return '--';\n  }\n  if (typeof number === 'string' && number.includes('<')) {\n    return number;\n  }\n\n  const regex = /^([+-]?[0-9]*\\.?[0-9]+)(\\D*)$/;\n  let matches = String(number).match(regex);\n  if (!matches) {\n    matches = [String(number), ''];\n  }\n  const suffix = matches[2] || '';\n\n  const numberFormat = parseFloat(matches[1] ?? '');\n  const factor = Math.pow(10, precision);\n  let resultNum: number;\n\n  switch (method) {\n    case 'FLOOR':\n      resultNum = Math.floor(numberFormat * factor) / factor;\n      break;\n    case 'CEIL':\n      resultNum = Math.ceil(numberFormat * factor) / factor;\n      break;\n    case 'ROUND':\n    default:\n      resultNum = Math.round((numberFormat + Number.EPSILON) * factor) / factor;\n  }\n  return resultNum.toFixed(precision) + suffix;\n};\n\nexport const getPercent = (\n  divisor: number | string | BigNumber,\n  dividend: number | string | BigNumber,\n  precision?: number,\n) => {\n  if (Number(dividend) === 0) return 0 + '%';\n  const bnDivisor = new BigNumber(divisor);\n  const bnDividend = new BigNumber(dividend);\n  const percentageNum = formatNumber(\n    bnDivisor.dividedBy(bnDividend).multipliedBy(100).toNumber(),\n  );\n  if (precision || precision === 0) {\n    const percentageNumPrecision = roundToFixedPrecision(\n      percentageNum,\n      precision,\n    );\n    if (percentageNumPrecision === '100.00') {\n      return '100%';\n    } else if (percentageNumPrecision === '0.00') {\n      return '0%';\n    }\n    return roundToFixedPrecision(percentageNum, precision) + '%';\n  }\n\n  return `${percentageNum}%`;\n};\n\nexport const formatTimeStamp = (\n  time: number,\n  type?: 'standard' | 'timezone',\n) => {\n  let result: string;\n  try {\n    switch (type) {\n      case 'standard':\n        result = dayjs(time).format('YYYY-MM-DD HH:mm:ss');\n        break;\n      case 'timezone':\n        result = dayjs(time).format('YYYY-MM-DD HH:mm:ss Z');\n        break;\n      default:\n        result = dayjs(time).format('YYYY-MM-DD HH:mm:ss');\n    }\n  } catch (error) {\n    result = '';\n  }\n  return result;\n};\n\nexport const fromGdripToDrip = (num: number | string) =>\n  new BigNumber(num).multipliedBy(10 ** 9);\n\nexport const fromCfxToDrip = (num: number | string) =>\n  new BigNumber(num).multipliedBy(10 ** 18);\n\nexport const formatBalance = (\n  balance: any,\n  decimals = 18,\n  isShowFull = false,\n  opt = {},\n  ltValue?: number | string,\n) => {\n  try {\n    const balanceValue =\n      typeof balance === 'string' || typeof balance === 'number'\n        ? new BigNumber(balance)\n        : balance;\n    const num = balanceValue.div(new BigNumber(10).pow(decimals));\n    if (num.eq(0)) {\n      return num.toFixed();\n    }\n    if (isShowFull) {\n      return toThousands(num.toFixed());\n    }\n    if (ltValue && num.lt(ltValue)) {\n      return `<${ltValue}`;\n    }\n    return formatNumber(num.toString(), opt);\n  } catch {\n    return '';\n  }\n};\n\ninterface BodyElement extends HTMLBodyElement {\n  createTextRange?(): Range;\n}\nexport const selectText = (element: HTMLElement) => {\n  var range: any,\n    selection: any,\n    body = document.body as BodyElement;\n  if (body.createTextRange) {\n    range = body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    selection = window.getSelection();\n    range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nexport const isHash = (str: string) => {\n  return /^0x[0-9a-fA-F]{64}$/.test(str);\n};\n\nexport const isBlockHash = async (str: string) => {\n  if (!isHash(str)) return false;\n  let isBlock = true;\n  try {\n    const block: any = await fetch(`/v1/block/${str}`);\n    // server side will return {} when no block found\n    if (!block.hash || block.code !== undefined) isBlock = false;\n  } catch (err) {\n    isBlock = false;\n  }\n\n  return isBlock;\n};\n\nexport const isTxHash = async (str: string) => {\n  if (!isHash(str)) return false;\n  return !isBlockHash(str);\n};\n\nexport function validURL(str: string) {\n  var pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i',\n  ); // fragment locator\n  return !!pattern.test(str);\n}\n\nexport function byteToKb(bytes: number) {\n  return bytes / 1024;\n}\n\nexport function isObject(o: any) {\n  return o !== null && typeof o === 'object' && Array.isArray(o) === false;\n}\n\nexport function checkInt(value: string | number, type: string) {\n  const num = Number(type.substr(3));\n  const min = new BigNumber(2).pow(num - 1).multipliedBy(-1);\n  const max = new BigNumber(2).pow(num - 1).minus(1);\n  let isType = false;\n  if (typeof value === 'number' && !isNaN(value)) {\n    const valNum = new BigNumber(value);\n    if (\n      valNum.isInteger() &&\n      valNum.isGreaterThanOrEqualTo(min) &&\n      valNum.isLessThanOrEqualTo(max)\n    ) {\n      isType = true;\n    } else {\n      isType = false;\n    }\n  } else {\n    isType = false;\n  }\n  return [isType, num, min.toString(), max.toString()];\n}\n\nexport function checkUint(value: string | number, type: string) {\n  const num = Number(type.substr(4));\n  const min = new BigNumber(0);\n  const max = new BigNumber(Math.pow(2, num)).minus(1);\n  let isType = false;\n  if (typeof value === 'number' && !isNaN(value)) {\n    const valNum = new BigNumber(value);\n    if (\n      valNum.isInteger() &&\n      valNum.isGreaterThanOrEqualTo(min) &&\n      valNum.isLessThanOrEqualTo(max)\n    ) {\n      isType = true;\n    } else {\n      isType = false;\n    }\n  } else {\n    isType = false;\n  }\n  return [isType, num, min.toFixed(), max.toFixed()];\n}\n\nexport function isHex(num: string, withPrefix = true) {\n  const reg = withPrefix ? /^0x[0-9a-f]*$/i : /^(0x)?[0-9a-f]*$/i;\n  return Boolean(num.match(reg));\n}\n\nexport function isEvenLength(str: string) {\n  const length = str.length;\n  return length > 0 && length % 2 === 0;\n}\n\nexport function checkBytes(value: string, type: string) {\n  if (type === 'byte') {\n    type = 'bytes1';\n  }\n  const num = Number(type.substr(5));\n  let isBytes = false;\n  if (!value) return [isBytes, num];\n  if (isHex(value) && isEvenLength(value)) {\n    if (num > 0) {\n      const str = value.substr(2);\n      const buffer = Buffer.from(str, 'hex');\n      if (buffer.length === num) {\n        isBytes = true;\n      } else {\n        isBytes = false;\n      }\n    } else {\n      isBytes = true;\n    }\n  } else {\n    isBytes = false;\n  }\n  return [isBytes, num];\n}\n\nexport function checkCfxType(value: string | number) {\n  if (isNaN(Number(value))) {\n    return false;\n  }\n  const valNum = new BigNumber(value);\n  if (valNum.isNegative()) {\n    return false;\n  }\n  let index = String(value).indexOf('.');\n  if (index !== -1) {\n    if (String(value).substr(index + 1).length > 18) {\n      return false;\n    } else {\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\n\nexport const sleep = (timeout: number) =>\n  new Promise(resolve => setTimeout(resolve, timeout));\n\n// get two block interval time\nexport const getTimeByBlockInterval = (minuend = 0, subtrahend = 0) => {\n  const seconds = new BigNumber(minuend)\n    .minus(subtrahend)\n    .dividedBy(2)\n    .toNumber();\n  const dayBase = 86400;\n  const hourBase = 3600;\n  const days = Math.floor(seconds / dayBase);\n  const deltaSecond = seconds - days * 86400;\n  const hours = Math.floor(deltaSecond / hourBase);\n  return { days, hours, seconds };\n};\n\n/**\n *\n * @param {number|string} data\n * @returns {boolean}\n * @example\n * 0    -> true\n * .    -> true\n * 0.   -> true\n * .0   -> true\n * 0.0  -> true\n * 0..0 -> false\n * x    -> false\n * e    -> false\n * @todo support config, such as negative and exponential notation\n */\n\n/**\n *\n * @param {number|string} data\n * @returns {boolean}\n * @example\n * 0    -> true\n * .    -> false\n * 11   -> true\n * 011  -> false\n * -1   -> false\n */\nexport const isSafeNumberOrNumericStringInput = (data: string) =>\n  /^\\d+\\.?\\d*$|^\\.\\d*$/.test(data);\n\nexport const isZeroOrPositiveInteger = (data: string) =>\n  /^(0|[1-9]\\d*)$/.test(data);\n\nexport const parseString = (v: string) => {\n  if (typeof v === 'string' && !v.startsWith('0x')) {\n    return Buffer.from(v);\n  }\n  return v;\n};\n\n// process datepicker initial value\nexport const getInitialDate = (minTimestamp: number, maxTimestamp: number) => {\n  const startDate = dayjs('2020-10-29T00:00:00+08:00');\n  const endDate = dayjs();\n  const innerMinTimestamp = minTimestamp\n    ? dayjs(new Date(parseInt((minTimestamp + '000') as string)))\n    : startDate;\n  const innerMaxTimestamp = maxTimestamp\n    ? dayjs(new Date(parseInt((maxTimestamp + '000') as string)))\n    : endDate;\n  const disabledDateD1 = (date: dayjs.Dayjs) =>\n    date &&\n    (date > innerMaxTimestamp.endOf('day') ||\n      date < startDate.subtract(1, 'day').endOf('day'));\n  const disabledDateD2 = (date: dayjs.Dayjs) =>\n    date &&\n    (date < innerMinTimestamp.subtract(1, 'day').endOf('day') ||\n      date > endDate.endOf('day'));\n\n  return {\n    minT: innerMinTimestamp,\n    maxT: innerMaxTimestamp,\n    dMinT: disabledDateD1,\n    dMaxT: disabledDateD2,\n  };\n};\n\nexport const addIPFSGateway = (\n  imgURL: string,\n  IPFSGatewayURL: string,\n): string => {\n  if (\n    typeof imgURL === 'string' &&\n    typeof IPFSGatewayURL === 'string' &&\n    imgURL.startsWith('ipfs://')\n  ) {\n    imgURL = `${IPFSGatewayURL}/${imgURL.replace('ipfs://', 'ipfs/')}`;\n  }\n\n  return imgURL;\n};\n\nexport const isLikeBigNumber = (obj: any) => {\n  if (obj === null || typeof obj !== 'object') {\n    return false;\n  }\n  return 's' in obj && 'e' in obj && 'c' in obj && Array.isArray(obj.c);\n};\n\ntype NestedArray = (string | number | BigNumber | NestedArray)[];\ntype NestedObject = {\n  [key: string]: BigNumber | string | NestedObject | NestedObject[];\n};\nexport const convertBigNumbersToStrings: any = (input: NestedArray) => {\n  return input.map((item: any) => {\n    if (item instanceof Uint8Array) {\n      return item;\n    }\n    if (Array.isArray(item)) {\n      return convertBigNumbersToStrings(item);\n    } else if (\n      item !== null &&\n      typeof item === 'object' &&\n      !isLikeBigNumber(item)\n    ) {\n      return convertObjBigNumbersToStrings(item);\n    } else if (isLikeBigNumber(item)) {\n      return item.toString(10);\n    } else {\n      return item;\n    }\n  });\n};\nexport const convertObjBigNumbersToStrings: any = (input: NestedArray) => {\n  const newObj: NestedObject = {};\n  if (Array.isArray(input)) {\n    return convertBigNumbersToStrings(input);\n  }\n  for (let key in input as any) {\n    if (isLikeBigNumber(input[key])) {\n      newObj[key] = (input[key] as BigNumber).toString(10);\n    } else if (Array.isArray(input[key])) {\n      newObj[key] = convertBigNumbersToStrings(input[key]);\n    } else if (typeof input[key] === 'object') {\n      newObj[key] = convertObjBigNumbersToStrings(input[key] as NestedObject);\n    } else {\n      newObj[key] = input[key];\n    }\n  }\n  return newObj;\n};\nexport const constprocessResultArray = (resultArray: NestedArray) => {\n  if (typeof resultArray === 'string') {\n    return resultArray;\n  }\n  const processElement: any = (element: any) => {\n    if (Array.isArray(element)) {\n      return element.map(processElement);\n    } else if (element.type && element.type === 'Buffer') {\n      let result = element.data\n        .map((byte: number) => ('00' + byte.toString(16)).slice(-2))\n        .join('');\n      if (!result.startsWith('0x')) {\n        result = '0x' + result;\n      }\n      return result;\n    } else {\n      return element;\n    }\n  };\n\n  const inputArray = Array.isArray(resultArray) ? resultArray : [resultArray];\n  return inputArray.map(processElement);\n};\n\nexport const formatLargeNumber = (number: string | number | BigNumber) => {\n  const num = new BigNumber(number);\n\n  if (num.isNaN()) {\n    return { value: null, unit: '' };\n  }\n\n  const T = new BigNumber(10).pow(12);\n  const P = new BigNumber(10).pow(15);\n  const E = new BigNumber(10).pow(18);\n\n  if (num.isGreaterThanOrEqualTo(E)) {\n    const result = num.dividedBy(E);\n    return {\n      value: result.isNaN() ? null : result.toString(),\n      unit: 'E',\n    };\n  } else if (num.isGreaterThanOrEqualTo(P)) {\n    const result = num.dividedBy(P);\n    return {\n      value: result.isNaN() ? null : result.toString(),\n      unit: 'P',\n    };\n  } else if (num.isGreaterThanOrEqualTo(T)) {\n    const result = num.dividedBy(T);\n    return {\n      value: result.isNaN() ? null : result.toString(),\n      unit: 'T',\n    };\n  } else {\n    return {\n      value: num.toString(),\n      unit: '',\n    };\n  }\n};\n\nconst EPS = new BigNumber(1e-6);\n\nexport function transferRisk(riskStr: string) {\n  const riskNum = new BigNumber(riskStr);\n\n  if (riskNum.isNaN()) {\n    return '';\n  }\n  // risk > 1e-4*(1+EPS)\n  if (riskNum.isGreaterThan(new BigNumber(1e-4).times(EPS.plus(1)))) {\n    return 'lv3';\n  }\n  // risk > 1e-6*(1+EPS)\n  if (riskNum.isGreaterThan(new BigNumber(1e-6).times(EPS.plus(1)))) {\n    return 'lv2';\n  }\n  // risk > 1e-8*(1+EPS)\n  if (riskNum.isGreaterThan(new BigNumber(1e-8).times(EPS.plus(1)))) {\n    return 'lv1';\n  }\n  return 'lv0';\n}\n\nexport const appendApiPrefix = (url: string) => {\n  // for cfx top N\n  if (url.startsWith('/stat/')) {\n    return url;\n  }\n  return `/v1${url}`;\n};\n\nexport const simpleGetFetcher = async (...args: any[]) => {\n  let [url, query] = args;\n  if (query) {\n    url = qs.stringify({ url, query });\n  }\n  return await fetch(appendApiPrefix(url), {\n    method: 'get',\n  });\n};\n\nexport const useSWRWithGetFecher = (\n  key: string | string[] | null,\n  swrOpts = {},\n) => {\n  const isTransferReq =\n    (typeof key === 'string' && key.startsWith('/transfer')) ||\n    (Array.isArray(key) &&\n      typeof key[0] === 'string' &&\n      key[0].startsWith('/transfer'));\n\n  const { data, error, mutate }: any = useSWR(key, simpleGetFetcher, {\n    ...swrOpts,\n  });\n\n  let tokenAddress: string | string[] = '';\n\n  // deal with token info\n  if (isTransferReq && data && data.list) {\n    tokenAddress = data.list.reduce(\n      (acc: string[], trans: { address: string }) => {\n        if (trans.address && !acc.includes(trans.address))\n          acc.push(trans.address);\n        return acc;\n      },\n      [],\n    );\n  }\n\n  const { data: tokenData }: any = useSWR(\n    qs.stringify({\n      url: '/token',\n      query: { addressArray: tokenAddress, fields: 'iconUrl' },\n    }),\n    simpleGetFetcher,\n  );\n\n  if (tokenData && tokenData.list) {\n    const newTransferList = data.list.map((trans: { address: string }) => {\n      if (tokenAddress.includes(trans.address)) {\n        const tokenInfo = tokenData.list.find(\n          (t: { address: string }) => t.address === trans.address,\n        );\n        if (tokenInfo) return { ...trans, token: { ...tokenInfo } };\n      }\n\n      return trans;\n    });\n\n    return {\n      data: {\n        ...data,\n        list: newTransferList,\n      },\n      error,\n      mutate,\n    };\n  }\n\n  return { data, error, mutate };\n};\n\nexport const mergeDeep = (...objects: any[]): any => {\n  return objects.reduce((prev, obj) => {\n    if (isObject(obj)) {\n      Object.keys(obj).forEach(key => {\n        const pVal = prev[key];\n        const oVal = obj[key];\n\n        if (Array.isArray(pVal) && Array.isArray(oVal)) {\n          prev[key] = pVal.concat(oVal);\n        } else if (isObject(pVal) && isObject(oVal)) {\n          prev[key] = mergeDeep(pVal, oVal);\n        } else {\n          prev[key] = oVal;\n        }\n      });\n    }\n    return prev;\n  }, {});\n};\n\ntype EventName = string;\ntype Callback = (data: any) => void;\n\ninterface Subscribers {\n  [eventName: string]: Callback[];\n}\n\nconst pubSubLib = () => {\n  const subscribers: Subscribers = {};\n\n  function publish(eventName: EventName, data: any): void {\n    const eventSubscribers = subscribers[eventName];\n    if (!Array.isArray(eventSubscribers)) {\n      return;\n    }\n    eventSubscribers.forEach(callback => {\n      callback(data);\n    });\n  }\n\n  function subscribe(eventName: EventName, callback: Callback): () => void {\n    if (!Array.isArray(subscribers[eventName])) {\n      subscribers[eventName] = [];\n    }\n    const eventSubscribers = subscribers[eventName] || [];\n    eventSubscribers.push(callback);\n    const index = eventSubscribers.length - 1;\n    return () => {\n      eventSubscribers.splice(index, 1);\n    };\n  }\n\n  return {\n    publish,\n    subscribe,\n  };\n};\n\nexport const pubsub = pubSubLib();\n\ninterface ErrorInfoType {\n  url?: string;\n  code?: number;\n  message?: string;\n  data?: string;\n  method?: string;\n}\n\nconst isNil = (value: any) => value === null || value === undefined;\nexport const publishRequestError = (\n  e: (Error & ErrorInfoType) | ErrorInfoType,\n  type: 'rpc' | 'http' | 'wallet' | 'code',\n) => {\n  let detail = '';\n  if (e.code && e.message) {\n    if (type === 'code') {\n      detail = e.message;\n    } else {\n      detail = `Error Code: ${e.code} \\n`;\n      if (type === 'http') {\n        const origin = window.location.origin;\n        detail += `Rest Api Url: ${\n          e.url?.includes('https://') ? e.url : origin + e.url\n        } \\n`;\n      }\n      if (type === 'rpc') {\n        // detail += `RPC Url: ${RPC_SERVER} \\n`;\n        if (!isNil(e.method)) {\n          detail += `Method: ${e.method} \\n`;\n        }\n        if (!isNil(e.data)) {\n          detail += `Data: ${e.data} \\n`;\n        }\n      }\n      detail += `Error Message: ${e.message} \\n`;\n    }\n  }\n\n  pubsub.publish('notify', {\n    type: 'request',\n    option: {\n      code: type === 'rpc' ? 30001 : e.code || 20000, // code is used for title, 20000 means unknown issue\n      message: e.message,\n      detail: detail,\n    },\n  });\n};\n\nexport const HIDE_IN_DOT_NET =\n  /.net$/.test(window.location.host) &&\n  localStorage.getItem(LOCALSTORAGE_KEYS_MAP.hideInDotNet) !== 'false';\n"],"mappings":"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","names":[]}