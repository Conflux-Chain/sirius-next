{"version":3,"sources":["../src/utils/request.ts"],"sourcesContent":["import qs from 'qs';\nimport { publishRequestError } from './index';\n\ninterface FetchWithAbortType<T> {\n  promise: Promise<T>;\n  abort: () => void;\n}\n\ninterface FetchOptions extends RequestInit {\n  timeout?: number;\n}\n\nconst TIMEOUT_TIMESTAMP = 60000;\n\nconst checkStatus = (response: Response) => {\n  if (\n    (response.status >= 200 && response.status < 300) ||\n    response.status === 600\n  ) {\n    return response;\n  } else {\n    const error = new Error(response.statusText);\n    error.name = 'HttpError';\n    (error as any).status = response.status;\n    (error as any).response = response;\n    throw error;\n  }\n};\n\nconst parseJSON = async (response: Response) => {\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } else {\n    return response;\n  }\n};\n\nconst fetchWithAbort = <T>(\n  url: string,\n  options: FetchOptions = {},\n): FetchWithAbortType<T> => {\n  const controller = new AbortController();\n  const opts: FetchOptions = { ...options, signal: controller.signal };\n  const timeout = options.timeout || TIMEOUT_TIMESTAMP;\n\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const promise: Promise<T> = new Promise((resolve, reject) => {\n    timeoutId = setTimeout(() => {\n      controller.abort();\n      publishRequestError(\n        { url, code: 408, message: 'Request timeout' },\n        'http',\n      );\n      reject(new Error('Request timeout'));\n    }, timeout);\n\n    window\n      .fetch(url, opts)\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(data => resolve(data as T))\n      .catch(error => {\n        if (error.name === 'AbortError') {\n          publishRequestError(\n            { url, code: 0, message: 'Fetch aborted' },\n            'http',\n          );\n          reject(new Error('Fetch aborted'));\n        } else {\n          publishRequestError(\n            { url, code: (error as any).status, message: error.message },\n            'http',\n          );\n          reject(error);\n        }\n      })\n      .finally(() => clearTimeout(timeoutId));\n  });\n\n  return {\n    promise,\n    abort: () => {\n      clearTimeout(timeoutId);\n      controller.abort();\n    },\n  };\n};\n\nexport const fetch = <T>(\n  url: string,\n  options: FetchOptions = {},\n): Promise<T> => {\n  const { promise } = fetchWithAbort<T>(url, options);\n  return promise;\n};\n\ntype RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\ninterface QueryParams {\n  [key: string]: string;\n}\ninterface Config {\n  url: string;\n  query: QueryParams;\n  type?: RequestMethod;\n  body?: any;\n  headers?: Headers;\n  signal?: AbortSignal;\n}\n\ninterface CustomResponse {\n  code: number;\n  data: any;\n  result: any;\n  message: string;\n  status: string;\n}\nexport const sendRequestChart = async (config: Config) => {\n  try {\n    const res: CustomResponse = await fetch(\n      `${config.url}?${qs.stringify(config.query)}`,\n      {\n        method: config.type || 'GET',\n        body: config.body,\n        headers: config.headers,\n        signal: config.signal,\n      },\n    );\n    const data = res.data || res.result || {};\n    data.list = [...(data.list || [])].reverse();\n    return data;\n  } catch (error) {\n    console.error('Request failed', error);\n    throw error;\n  }\n};\n"],"mappings":";;;;;AAAA,OAAO,QAAQ;AAYf,IAAM,oBAAoB;AAE1B,IAAM,cAAc,CAAC,aAAuB;AAC1C,MACG,SAAS,UAAU,OAAO,SAAS,SAAS,OAC7C,SAAS,WAAW,KACpB;AACA,WAAO;AAAA,EACT,OAAO;AACL,UAAM,QAAQ,IAAI,MAAM,SAAS,UAAU;AAC3C,UAAM,OAAO;AACb,IAAC,MAAc,SAAS,SAAS;AACjC,IAAC,MAAc,WAAW;AAC1B,UAAM;AAAA,EACR;AACF;AAEA,IAAM,YAAY,OAAO,aAAuB;AAC9C,QAAM,cAAc,SAAS,QAAQ,IAAI,cAAc;AACvD,MAAI,eAAe,YAAY,SAAS,kBAAkB,GAAG;AAC3D,WAAO,SAAS,KAAK;AAAA,EACvB,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,IAAM,iBAAiB,CACrB,KACA,UAAwB,CAAC,MACC;AAC1B,QAAM,aAAa,IAAI,gBAAgB;AACvC,QAAM,OAAqB,EAAE,GAAG,SAAS,QAAQ,WAAW,OAAO;AACnE,QAAM,UAAU,QAAQ,WAAW;AAEnC,MAAI;AACJ,QAAM,UAAsB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC3D,gBAAY,WAAW,MAAM;AAC3B,iBAAW,MAAM;AACjB;AAAA,QACE,EAAE,KAAK,MAAM,KAAK,SAAS,kBAAkB;AAAA,QAC7C;AAAA,MACF;AACA,aAAO,IAAI,MAAM,iBAAiB,CAAC;AAAA,IACrC,GAAG,OAAO;AAEV,WACG,MAAM,KAAK,IAAI,EACf,KAAK,WAAW,EAChB,KAAK,SAAS,EACd,KAAK,UAAQ,QAAQ,IAAS,CAAC,EAC/B,MAAM,WAAS;AACd,UAAI,MAAM,SAAS,cAAc;AAC/B;AAAA,UACE,EAAE,KAAK,MAAM,GAAG,SAAS,gBAAgB;AAAA,UACzC;AAAA,QACF;AACA,eAAO,IAAI,MAAM,eAAe,CAAC;AAAA,MACnC,OAAO;AACL;AAAA,UACE,EAAE,KAAK,MAAO,MAAc,QAAQ,SAAS,MAAM,QAAQ;AAAA,UAC3D;AAAA,QACF;AACA,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC,EACA,QAAQ,MAAM,aAAa,SAAS,CAAC;AAAA,EAC1C,CAAC;AAED,SAAO;AAAA,IACL;AAAA,IACA,OAAO,MAAM;AACX,mBAAa,SAAS;AACtB,iBAAW,MAAM;AAAA,IACnB;AAAA,EACF;AACF;AAEO,IAAM,QAAQ,CACnB,KACA,UAAwB,CAAC,MACV;AACf,QAAM,EAAE,QAAQ,IAAI,eAAkB,KAAK,OAAO;AAClD,SAAO;AACT;AAsBO,IAAM,mBAAmB,OAAO,WAAmB;AACxD,MAAI;AACF,UAAM,MAAsB,MAAM;AAAA,MAChC,GAAG,OAAO,GAAG,IAAI,GAAG,UAAU,OAAO,KAAK,CAAC;AAAA,MAC3C;AAAA,QACE,QAAQ,OAAO,QAAQ;AAAA,QACvB,MAAM,OAAO;AAAA,QACb,SAAS,OAAO;AAAA,QAChB,QAAQ,OAAO;AAAA,MACjB;AAAA,IACF;AACA,UAAM,OAAO,IAAI,QAAQ,IAAI,UAAU,CAAC;AACxC,SAAK,OAAO,CAAC,GAAI,KAAK,QAAQ,CAAC,CAAE,EAAE,QAAQ;AAC3C,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,UAAM;AAAA,EACR;AACF;","names":[]}