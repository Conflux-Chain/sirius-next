{"version":3,"sources":["../../../src/components/AddressContainer/index.tsx"],"sourcesContent":["import { memo, useCallback } from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport _ from 'lodash';\nimport {\n  formatAddress,\n  isAddress,\n  isContractAddress,\n  isInnerContractAddress,\n  isZeroAddress,\n  isBase32Address,\n} from '../../utils/address';\nimport { useGlobalData, getTranslations, getEnvConfig } from '../../store';\nimport { LOCALSTORAGE_KEYS_MAP, apiPrefix } from '../../utils/constants';\nimport { getLabelInfo } from './label';\nimport { sendRequestENSInfo } from 'src/utils/request';\nimport { Props } from './types';\nimport { RenderAddress } from './readerAdress';\nimport {\n  ContractCreatedAddress,\n  HexAddress,\n  InvalidAddress,\n  ContractAddress,\n  MyAddress,\n  PosAddress,\n} from './assembleAddress';\n\nconst parseProps = (props: Props & WithTranslation) => {\n  const {\n    globalData,\n    alias,\n    ensInfo,\n    t,\n    showAddressLabel,\n    showNametag,\n    nametagInfo,\n    showENSLabel,\n  } = props;\n  const ENV_CONFIG = getEnvConfig();\n  const outputType = ENV_CONFIG.ENV_ADDRESS || 'base32';\n  const cfxAddress = formatAddress(props.value, outputType);\n\n  let ENSMap = ensInfo || {};\n\n  const translations = getTranslations();\n\n  let aliasLabel = alias;\n  if (!alias && isZeroAddress(cfxAddress)) {\n    aliasLabel = t(translations.general.zeroAddress);\n  }\n\n  let prefixIcon: React.ReactNode = null;\n  // official name tag\n  let officalNametag: React.ReactNode = null;\n  // private name tag\n  let addressLabel: React.ReactNode = null;\n  // ens name tag\n  let ENSLabel: React.ReactNode = null;\n  // global ens name tag\n  const gENSLabel = cfxAddress && ENSMap[cfxAddress]?.name;\n  // global private name tag\n  const addressLabels = globalData?.[LOCALSTORAGE_KEYS_MAP.addressLabel];\n  const gAddressLabel =\n    addressLabels?.[cfxAddress] ||\n    addressLabels?.[cfxAddress.toLocaleLowerCase()];\n\n  if (showAddressLabel && gAddressLabel) {\n    const { label } = getLabelInfo(gAddressLabel, 'tag');\n\n    addressLabel = label;\n  }\n\n  if (showNametag) {\n    const addressLabels =\n      nametagInfo?.[cfxAddress] ||\n      nametagInfo?.[cfxAddress.toLocaleLowerCase()];\n    const nametag = addressLabels?.nametag ?? '';\n    const { label } = getLabelInfo(nametag, 'nametag');\n\n    officalNametag = label;\n  }\n\n  if (showENSLabel && gENSLabel) {\n    const { label, icon } = getLabelInfo(gENSLabel, 'ens');\n\n    ENSLabel = label;\n    prefixIcon = icon;\n  }\n\n  let link = props.isLink || props.link;\n\n  return {\n    alias: aliasLabel,\n    prefix: prefixIcon,\n    nametag: officalNametag,\n    addressLabel,\n    ENSLabel,\n    cfxAddress,\n    link,\n  };\n};\n\nconst ensUrl = (value: string) => {\n  let url = undefined;\n  if (value && isBase32Address(value)) {\n    url = apiPrefix + '/ens/reverse/match?address=' + value;\n  }\n  return url;\n};\nexport const AddressContainer = withTranslation()(\n  memo((props: Props & WithTranslation) => {\n    const { globalData } = useGlobalData();\n\n    const url = ensUrl(props.value);\n    const sendRequestCallback = useCallback(() => {\n      return sendRequestENSInfo(url);\n    }, [url]);\n    const { data: ensData } = useSWR(url, sendRequestCallback, {\n      revalidateOnFocus: false,\n    });\n\n    // If a txn receipt has no 'to' address or 'contractCreated', show -- for temp\n    if (!props.value && !props.contractCreated) {\n      return <></>;\n    }\n\n    const defaultProps = {\n      globalData,\n      isFull: false,\n      isFullNameTag: false,\n      link: true,\n      isMe: false,\n      showIcon: true,\n      verify: false,\n      showAddressLabel: true,\n      showENSLabel: true,\n      showNametag: true,\n      ensInfo: ensData,\n    };\n\n    const mergeDefaultProps = _.assign({}, defaultProps, props);\n\n    const mergeParseProps = _.merge(\n      {},\n      mergeDefaultProps,\n      parseProps(mergeDefaultProps),\n    );\n\n    if (mergeParseProps.isPosAddress) {\n      return PosAddress(mergeParseProps);\n    }\n\n    if (!mergeParseProps.value && mergeParseProps.contractCreated) {\n      return ContractCreatedAddress(mergeParseProps);\n    }\n\n    if (mergeParseProps.isEspaceAddress) {\n      return HexAddress(mergeParseProps);\n    }\n\n    if (!isAddress(mergeParseProps.value)) {\n      return InvalidAddress(mergeParseProps);\n    }\n\n    if (\n      mergeParseProps.isContract ||\n      isContractAddress(mergeParseProps.cfxAddress) ||\n      isInnerContractAddress(mergeParseProps.cfxAddress)\n    ) {\n      return ContractAddress(mergeParseProps);\n    }\n\n    if (mergeParseProps.isMe) {\n      return MyAddress(mergeParseProps);\n    }\n\n    return RenderAddress(mergeParseProps);\n  }),\n);\n"],"mappings":"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","names":["addressLabels"]}