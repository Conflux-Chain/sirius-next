{"version":3,"sources":["../../../src/components/AddressContainer/index.tsx"],"sourcesContent":["import { memo,useCallback } from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport SDK from 'js-conflux-sdk';\nimport useSWR from 'swr';\nimport { Translation } from 'react-i18next';\nimport { AlertTriangle, File } from '@zeit-ui/react-icons';\nimport InternalContractIcon from '../../images/internal-contract-icon.png';\nimport ContractIcon from '../../images/contract-icon.png';\nimport VerifiedIcon from '../../images/verified.png';\nimport isMeIcon from '../../images/me.png';\nimport { Tooltip } from '../Tooltip';\nimport {\n  abbreviateString,\n  formatAddress,\n  isCfxHexAddress,\n  isAddress,\n  isContractAddress,\n  isInnerContractAddress,\n  isZeroAddress,\n} from '../../utils/address';\nimport { useGlobalData, getTranslations, getEnvConfig } from '../../store';\nimport { LOCALSTORAGE_KEYS_MAP } from '../../utils/constants';\nimport { getLabelInfo } from './label';\nimport { getNetwork, formatString } from 'src/utils';\nimport { sendRequestENSInfo } from 'src/utils/request';\n\nconst defaultPCMaxWidth = 138;\n\ninterface RenderAddressProps {\n  cfxAddress?: string;\n  alias?: string;\n  hoverValue?: string;\n  hrefAddress?: string;\n  isContract?: boolean;\n  content?: string;\n  isLink?: boolean;\n  link?: string | boolean;\n  isFull?: boolean;\n  isFullNameTag?: boolean;\n  style?: React.CSSProperties;\n  maxWidth?: number;\n  suffixSize?: number;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  type?: 'pow' | 'pos';\n  addressLabel?: string | Iterable<React.ReactNode> | null;\n  ENSLabel?: string | Iterable<React.ReactNode> | null;\n  nametag?: string | Iterable<React.ReactNode> | null;\n}\ninterface TooltipContent {\n  [key: string]: {\n    label: string;\n    value: string | Iterable<React.ReactNode> | null | undefined;\n  };\n}\nconst renderTooltipContent = (tooltipContent: TooltipContent) => {\n  return Object.entries(tooltipContent)\n    .map(([key, { label, value }]) => {\n      if (value) {\n        return (\n          <div key={key}>\n            <span>\n              <Translation>{t => t(label)}</Translation>\n            </span>\n            {value}\n          </div>\n        );\n      }\n      return null;\n    })\n    .filter(Boolean);\n};\n\nexport const RenderAddress = ({\n  cfxAddress,\n  alias,\n  hoverValue,\n  hrefAddress,\n  content,\n  link = '',\n  isFull = false,\n  isFullNameTag = false,\n  style = {},\n  maxWidth,\n  prefix = null,\n  suffix = null,\n  type = 'pow',\n  addressLabel = '',\n  ENSLabel = '',\n  nametag = ''\n}: RenderAddressProps) => {\n  const translations = getTranslations();\n\n  let href =\n    typeof link === 'string'\n      ? link\n      : `/${type === 'pow' ? 'address' : 'pos/accounts'}/${hrefAddress || cfxAddress}`;\n\n  const name = content || ENSLabel || nametag || addressLabel || alias;\n\n  const calculatedMaxWidth =\n    name && isFullNameTag ? 1000 : isFull ? 430 : maxWidth || defaultPCMaxWidth;\n  const baseClassName = `w-[${calculatedMaxWidth}px] relative inline-flex flex-nowrap align-bottom cursor-default whitespace-nowrap overflow-hidden`;\n\n  const Wrapper = href ? 'a' : 'div';\n\n  const tooltipContent = {\n    ENSLabel: {\n      label: (translations as any)?.ens?.tip,\n      value: ENSLabel,\n    },\n    nametag: {\n      label: translations?.nametag?.tip,\n      value: nametag,\n    },\n    addressLabel: {\n      label: translations?.profile.address.myNameTag,\n      value: addressLabel,\n    },\n    alias: {\n      label: translations?.profile.address.publicNameTag,\n      value: alias,\n    },\n  };\n  const cfxAddressLabel =\n    typeof cfxAddress === 'string' && !isFull\n      ? abbreviateString(cfxAddress)\n      : cfxAddress;\n\n  return (\n    <div className=\"inline-flex\">\n      {prefix}\n      <Tooltip\n        title={\n          <>\n            {renderTooltipContent(tooltipContent)}\n            <div>{hoverValue || cfxAddress}</div>\n          </>\n        }\n      >\n        <Wrapper\n          className={baseClassName}\n          style={style}\n          {...(href ? { href: String(href) } : {})}\n        >\n          {name || cfxAddressLabel}\n        </Wrapper>\n      </Tooltip>\n      {suffix}\n    </div>\n  );\n};\n\ninterface Props {\n  globalData?: any;\n  value: string; // address value\n  alias?: string; // address alias, such as contract name, miner name, default null\n  contractCreated?: string; // contract creation address\n  maxWidth?: number; // address max width for view, default 200/170 for default, 400 for full\n  isFull?: boolean; // show full address, default false\n  isFullNameTag?: boolean; // show full nametag\n  isLink?: boolean;\n  link?: boolean; // add link to address, default true\n  isMe?: boolean; // when `address === portal selected address`, set isMe to true to add special tag, default false\n  suffixAddressSize?: number; // suffix address size, default is 8\n  showIcon?: boolean; // whether show contract icon, default true\n  verify?: boolean; // show verified contract icon or unverified contract icon\n  isEspaceAddress?: boolean; // check the address if is a eSpace hex address, if yes, link to https://evm.confluxscan.net/address/{hex_address}\n  showAddressLabel?: boolean;\n  showENSLabel?: boolean;\n  ensInfo?: {\n    [k: string]: {\n      address: string;\n      name: string;\n      expired?: number;\n    };\n  };\n  showNametag?: boolean;\n  nametag?: string | Iterable<React.ReactNode> | null;\n  nametagInfo?: {\n    [k: string]: {\n      address: string;\n      nametag: string;\n    };\n  };\n  cfxAddress?: string;\n  isContract?: boolean;\n}\n\nconst ContractCreatedAddress = (props: Props & WithTranslation) => {\n  const {\n    globalData,\n    contractCreated = '',\n    showAddressLabel,\n    showNametag,\n    nametagInfo,\n    showENSLabel,\n    t,\n    ensInfo,\n  } = props;\n\n  const isCore = isCfxHexAddress(contractCreated);\n\n  const translations = getTranslations();\n\n  const fContractCreated = formatAddress(contractCreated);\n\n  // official name tag\n  let officalNametag: React.ReactNode = null;\n  // private name tag\n  let addressLabel: React.ReactNode = null;\n\n  // global private name tag\n  const gAddressLabel =\n    globalData?.[LOCALSTORAGE_KEYS_MAP.addressLabel]?.[fContractCreated];\n\n  if (showAddressLabel && gAddressLabel) {\n    const { label } = getLabelInfo(gAddressLabel, 'tag');\n\n    addressLabel = label;\n  }\n\n  if (showNametag) {\n    const _label = nametagInfo?.[fContractCreated]?.nametag ?? '';\n    const { label } = getLabelInfo(_label, 'nametag');\n\n    officalNametag = label;\n  }\n\n  // ens name tag\n  let ENSLabel: React.ReactNode = null;\n  if (isCore && showENSLabel) {\n    let ENSMap = ensInfo || {};\n\n    // global ens name tag\n    const gENSLabel = ENSMap[fContractCreated]?.name;\n    if (gENSLabel) {\n      const { label } = getLabelInfo(gENSLabel, 'ens');\n      ENSLabel = label;\n    }\n  }\n\n  const customProps = {\n    content: t(translations.transaction.contractCreation),\n    nametag: officalNametag,\n    hoverValue: fContractCreated,\n    hrefAddress: fContractCreated,\n    maxWidth: 160,\n    ENSLabel,\n    addressLabel,\n  };\n\n  const mergedProps = { ...customProps, ...props };\n  return RenderAddress(mergedProps);\n};\n\nconst HexAddress = (props: Props & WithTranslation) => {\n  const { globalData, value, t, isFull, maxWidth } = props;\n  \n  const ENV_CONFIG = getEnvConfig();\n    const translations = getTranslations();\n    const hexAddress = SDK.format.hexAddress(value);\n    const network = getNetwork(globalData.networks['testnet'], ENV_CONFIG.ENV_NETWORK_ID); // 000 evm testnet\n    const url = `${window.location.protocol}${network.url}/address/${hexAddress}`;\n\n    return RenderAddress({\n      cfxAddress: hexAddress,\n      alias: formatString(hexAddress, 'hexAddress'),\n      hoverValue: hexAddress,\n      link: url,\n      isFull,\n      maxWidth,\n      suffixSize: 0,\n      prefix: (\n        <div className=\"mr-[2px] flex-shrink-0\">\n          <Tooltip title={t((translations as any).general.eSpaceAddress)}>\n            <File size={16} color=\"#17B38A\" />\n          </Tooltip>\n        </div>\n      ),\n    });\n};\n\nconst InvalidAddress = (props: Props & WithTranslation) => {\n  const { value, alias, t, isFull, maxWidth, isFullNameTag } = props;\n\n  const translations = getTranslations();\n\n  const tip = t(translations.general.invalidAddress);\n\n  return RenderAddress({\n    cfxAddress: value,\n    alias,\n    hoverValue: `${tip}: ${value}`,\n    content: alias ? formatString(alias, 'tag') : value,\n    link: false,\n    isFull,\n    isFullNameTag,\n    maxWidth,\n    style: { color: '#e00909' },\n    prefix: (\n      <div className=\"mr-[2px] flex-shrink-0\">\n        <Tooltip title={tip}>\n          <AlertTriangle size={16} color=\"#e00909\" />\n        </Tooltip>\n      </div>\n    ),\n  });\n};\n\nconst ContractAddress = (props: Props & WithTranslation) => {\n  const { showIcon, verify, t, cfxAddress, isFull } = props;\n\n  const translations = getTranslations();\n\n  const isInnerContract = cfxAddress && isInnerContractAddress(cfxAddress);\n\n  const typeText = t(\n    isInnerContract\n      ? translations.general.internalContract\n      : verify\n        ? translations.general.verifiedContract\n        : translations.general.unverifiedContract,\n  );\n\n  return RenderAddress({\n    ...props,\n    prefix: showIcon ? (\n      <div className={`mr-[2px] flex-shrink-0 ${isFull ? 'icon' : ''}`}>\n        <Tooltip title={typeText}>\n          <div className=\"relative w-[16px] h-[16px]\">\n            {isInnerContract ? (\n              <img\n                className=\"w-[16px] h-[16px] align-bottom mb-[5px]\"\n                src={InternalContractIcon}\n                alt={typeText}\n              />\n            ) : (\n              <>\n                <img\n                  className=\"w-[16px] h-[16px] align-bottom mb-[5px]\"\n                  src={ContractIcon}\n                  alt={typeText}\n                />\n                {verify ? (\n                  <img\n                    className=\"w-[8px] h-[8px] absolute bottom-[-1px] right-[1px]\"\n                    src={VerifiedIcon}\n                    alt={''}\n                  />\n                ) : (\n                  <></>\n                )}\n              </>\n            )}\n          </div>\n        </Tooltip>\n      </div>\n    ) : (\n      <></>\n    ),\n  });\n};\n\nconst MyAddress = (props: Props & WithTranslation) => {\n  const { isFull } = props;\n  return RenderAddress({\n    ...props,\n    suffix: (\n      <div className=\"mr-[2px] flex-shrink-0\">\n        <img\n          className={`w-[38.5px] h-[16px] mr-[3px] align-bottom mb-[${isFull ? 6 : 4}px]`}\n          src={isMeIcon}\n          alt=\"is me\"\n        />\n      </div>\n    ),\n  });\n};\n\nconst parseProps = (props: Props & WithTranslation) => {\n  const {\n    globalData,\n    alias,\n    ensInfo,\n    t,\n    showAddressLabel,\n    showNametag,\n    nametagInfo,\n    showENSLabel,\n  } = props;\n  const ENV_CONFIG = getEnvConfig();\n  const outputType = ENV_CONFIG.ENV_ADDRESS || 'base32';\n  const cfxAddress = formatAddress(props.value, outputType);\n\n  let ENSMap = ensInfo || {};\n\n\n\n  const translations = getTranslations();\n\n  let aliasLabel = alias;\n  if (!alias && isZeroAddress(cfxAddress)) {\n    aliasLabel = t(translations.general.zeroAddress);\n  }\n\n  let prefixIcon: React.ReactNode = null;\n  // official name tag\n  let officalNametag: React.ReactNode = null;\n  // private name tag\n  let addressLabel: React.ReactNode = null;\n  // ens name tag\n  let ENSLabel: React.ReactNode = null;\n  // global ens name tag\n  const gENSLabel = cfxAddress && ENSMap[cfxAddress]?.name;\n  // global private name tag\n  const gAddressLabel =\n    globalData?.[LOCALSTORAGE_KEYS_MAP.addressLabel]?.[cfxAddress];\n\n  if (showAddressLabel && gAddressLabel) {\n    const { label } = getLabelInfo(gAddressLabel, 'tag');\n\n    addressLabel = label;\n  }\n\n  if (showNametag) {\n    const nametag = nametagInfo?.[cfxAddress]?.nametag ?? '';\n    const { label } = getLabelInfo(nametag, 'nametag');\n\n    officalNametag = label;\n  }\n\n  if (showENSLabel && gENSLabel) {\n    const { label, icon } = getLabelInfo(gENSLabel, 'ens');\n\n    ENSLabel = label;\n    prefixIcon = icon;\n  }\n\n  return {\n    alias: aliasLabel,\n    prefix: prefixIcon,\n    nametag: officalNametag,\n    addressLabel,\n    ENSLabel,\n    cfxAddress,\n  };\n};\nexport const AddressContainer = withTranslation()(\n  memo((props: Props & WithTranslation) => {\n    const { globalData } = useGlobalData();\n    const sendRequestCallback = useCallback(() => {\n      return sendRequestENSInfo({\n        url: '/v1/ens/reverse/match',\n        query: {address: props.value}\n      });\n    }, [props.value]);\n  \n    const { data, isLoading } = useSWR(\n      '/v1/ens/reverse/match?address=' + props.value,\n      sendRequestCallback,\n      {\n        revalidateOnFocus: false,\n      },\n    );\n    console.log(data, isLoading)\n    const defaultProps = {\n      globalData,\n      isFull: false,\n      isFullNameTag: false,\n      link: true,\n      isMe: false,\n      showIcon: true,\n      verify: false,\n      showAddressLabel: true,\n      showENSLabel: true,\n      showNametag: true,\n      ensInfo: data,\n    };\n\n    const mergedProps = { ...defaultProps, ...props };\n\n    if(mergedProps.isLink) {\n      mergedProps.link = mergedProps.isLink;\n    }\n\n    if (!mergedProps.value && mergedProps.contractCreated) {\n      return ContractCreatedAddress(mergedProps);\n    }\n\n    // If a txn receipt has no 'to' address or 'contractCreated', show -- for temp\n    if (!mergedProps.value && !mergedProps.contractCreated) {\n      return <></>;\n    }\n\n    if (mergedProps.isEspaceAddress) {\n      return HexAddress(mergedProps);\n    }\n\n    if (!isAddress(mergedProps.value)) {\n      return InvalidAddress(mergedProps);\n    }\n\n    const _props = { ...mergedProps, ...parseProps(mergedProps) };\n\n    \n    if (!props.ensInfo) {\n      console.log(1)\n      \n    }\n  \n\n    if (\n      _props.isContract || \n      isContractAddress(_props.cfxAddress) ||\n      isInnerContractAddress(_props.cfxAddress)\n    ) {\n      return ContractAddress(_props);\n    }\n\n    if (mergedProps.isMe) {\n      return MyAddress(_props);\n    }\n\n    return RenderAddress(_props);\n  }),\n);\n"],"mappings":"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","names":[]}