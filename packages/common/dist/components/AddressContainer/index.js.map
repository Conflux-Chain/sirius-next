{"version":3,"sources":["../../../src/components/AddressContainer/index.tsx"],"sourcesContent":["import { memo } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Translation } from 'react-i18next';\nimport { Tooltip } from '../Tooltip';\nimport { abbreviateString } from '../../utils/address';\nimport { getTranslations } from '../../store';\n\nconst defaultPCMaxWidth = 138;\n\ninterface RenderAddressProps {\n  cfxAddress?: string;\n  alias?: string;\n  hoverValue?: string;\n  hrefAddress?: string;\n  content?: string;\n  link?: string | boolean;\n  isFull?: boolean;\n  isFullNameTag?: boolean;\n  style?: React.CSSProperties;\n  maxWidth?: number;\n  suffixSize?: number;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  type?: 'pow' | 'pos';\n  addressLabel?: string | Iterable<React.ReactNode> | null;\n  ENSLabel?: string | Iterable<React.ReactNode> | null;\n  nametag?: string | Iterable<React.ReactNode> | null;\n}\ninterface TooltipContent {\n  [key: string]: {\n    label: string;\n    value: string | Iterable<React.ReactNode> | null | undefined;\n  }\n}\nconst renderTooltipContent = (tooltipContent: TooltipContent) => {\n  return Object.entries(tooltipContent)\n    .map(([key, { label, value }]) => {\n      if (value) {\n        return (\n          <div key={key}>\n            <span>\n              <Translation>{t => t(label)}</Translation>\n            </span>\n            {value}\n          </div>\n        );\n      }\n      return null;\n    })\n    .filter(Boolean);\n};\n\nexport const RenderAddress = ({\n  cfxAddress,\n  alias,\n  hoverValue,\n  hrefAddress,\n  content,\n  link = '',\n  isFull = false,\n  isFullNameTag = false,\n  style = {},\n  maxWidth,\n  prefix = null,\n  suffix = null,\n  type = 'pow',\n  addressLabel = '',\n  ENSLabel = '',\n  nametag = '',\n}: RenderAddressProps) => {\n  const translations = getTranslations();\n\n  let href;\n\n  const name = content || ENSLabel || nametag || addressLabel || alias;\n\n  const calculatedMaxWidth = name && isFullNameTag ? 1000 : isFull ? 430 : maxWidth || defaultPCMaxWidth;\n\n  if (link) {\n    if (typeof link === 'string') {\n      href = link;\n    } else {\n      href = `/${type === 'pow' ? 'address' : 'pos/accounts'}/${\n        hrefAddress || cfxAddress\n      }`;\n    }\n  }\n\n  const baseClassName = `w-[${calculatedMaxWidth}px] relative inline-flex flex-nowrap align-bottom cursor-default whitespace-nowrap overflow-hidden`;\n\n  const Wrapper = href ? 'a' : 'div';\n\n  const tooltipContent = {\n    ENSLabel: {\n      label: (translations as any)?.ens?.tip,\n      value: ENSLabel,\n    },\n    nametag: {\n      label: translations?.nametag?.tip,\n      value: nametag,\n    },\n    addressLabel: {\n      label: translations?.profile.address.myNameTag,\n      value: addressLabel,\n    },\n    alias: {\n      label: translations?.profile.address.publicNameTag,\n      value: alias,\n    },\n  };\n  const cfxAddressLabel = typeof cfxAddress === 'string' && !isFull ? abbreviateString(cfxAddress) : cfxAddress;\n\n  return (\n    <div className=\"inline\">\n      {prefix}\n      <Tooltip\n        title={\n          <>\n            {renderTooltipContent(tooltipContent)}\n            <div>{hoverValue || cfxAddress}</div>\n          </>\n        }\n      >\n        <Wrapper\n          className={baseClassName}\n          style={style}\n          {...(href ? { href: String(href) } : {})}\n        >\n          {name || cfxAddressLabel}\n        </Wrapper>\n      </Tooltip>\n      {suffix}\n    </div>\n  );\n};\n\nexport const AddressContainer = withTranslation()(\n  memo(({}) => {\n    return <></>;\n  }),\n);\n"],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,YAAY;AACrB,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAqClB,SA8EA,UA5EI,KAFJ;AAhCV,IAAM,oBAAoB;AA2B1B,IAAM,uBAAuB,CAAC,mBAAmC;AAC/D,SAAO,OAAO,QAAQ,cAAc,EACjC,IAAI,CAAC,CAAC,KAAK,EAAE,OAAO,MAAM,CAAC,MAAM;AAChC,QAAI,OAAO;AACT,aACE,qBAAC,SACC;AAAA,4BAAC,UACC,8BAAC,eAAa,iBAAK,EAAE,KAAK,GAAE,GAC9B;AAAA,QACC;AAAA,WAJO,GAKV;AAAA,IAEJ;AACA,WAAO;AAAA,EACT,CAAC,EACA,OAAO,OAAO;AACnB;AAEO,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,QAAQ,CAAC;AAAA,EACT;AAAA,EACA,SAAS;AAAA,EACT,SAAS;AAAA,EACT,OAAO;AAAA,EACP,eAAe;AAAA,EACf,WAAW;AAAA,EACX,UAAU;AACZ,MAA0B;AACxB,QAAM,eAAe,gBAAgB;AAErC,MAAI;AAEJ,QAAM,OAAO,WAAW,YAAY,WAAW,gBAAgB;AAE/D,QAAM,qBAAqB,QAAQ,gBAAgB,MAAO,SAAS,MAAM,YAAY;AAErF,MAAI,MAAM;AACR,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO;AAAA,IACT,OAAO;AACL,aAAO,IAAI,SAAS,QAAQ,YAAY,cAAc,IACpD,eAAe,UACjB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,gBAAgB,MAAM,kBAAkB;AAE9C,QAAM,UAAU,OAAO,MAAM;AAE7B,QAAM,iBAAiB;AAAA,IACrB,UAAU;AAAA,MACR,OAAQ,cAAsB,KAAK;AAAA,MACnC,OAAO;AAAA,IACT;AAAA,IACA,SAAS;AAAA,MACP,OAAO,cAAc,SAAS;AAAA,MAC9B,OAAO;AAAA,IACT;AAAA,IACA,cAAc;AAAA,MACZ,OAAO,cAAc,QAAQ,QAAQ;AAAA,MACrC,OAAO;AAAA,IACT;AAAA,IACA,OAAO;AAAA,MACL,OAAO,cAAc,QAAQ,QAAQ;AAAA,MACrC,OAAO;AAAA,IACT;AAAA,EACF;AACA,QAAM,kBAAkB,OAAO,eAAe,YAAY,CAAC,SAAS,iBAAiB,UAAU,IAAI;AAEnG,SACE,qBAAC,SAAI,WAAU,UACZ;AAAA;AAAA,IACD;AAAA,MAAC;AAAA;AAAA,QACC,OACE,iCACG;AAAA,+BAAqB,cAAc;AAAA,UACpC,oBAAC,SAAK,wBAAc,YAAW;AAAA,WACjC;AAAA,QAGF;AAAA,UAAC;AAAA;AAAA,YACC,WAAW;AAAA,YACX;AAAA,YACC,GAAI,OAAO,EAAE,MAAM,OAAO,IAAI,EAAE,IAAI,CAAC;AAAA,YAErC,kBAAQ;AAAA;AAAA,QACX;AAAA;AAAA,IACF;AAAA,IACC;AAAA,KACH;AAEJ;AAEO,IAAM,mBAAmB,gBAAgB;AAAA,EAC9C,KAAK,CAAC,CAAC,MAAM;AACX,WAAO,gCAAE;AAAA,EACX,CAAC;AACH;","names":[]}