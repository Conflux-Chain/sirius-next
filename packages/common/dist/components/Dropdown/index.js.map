{"version":3,"sources":["../../../src/components/Dropdown/index.tsx"],"sourcesContent":["import qs from 'qs';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useClickAway } from '@cfx-kit/react-utils/dist/hooks.js';\nimport clsx from 'clsx';\nimport Button from '../Button';\n\n// options example:\n// [\n//   {\n//     key: 'txType',\n//     value: 'all',\n//     name: 'viewAll',\n//   },\n//   {\n//     key: 'txType',\n//     value: 'outgoing',\n//     name: 'viewOutgoingTxns',\n//   },\n//   {\n//     key: 'txType',\n//     value: 'incoming',\n//     name: 'viewIncomingTxns',\n//   },\n//   {\n//     key: 'txType',\n//     value: '1',\n//     name: 'failed txns',\n//   },\n// ];\n\nexport const TableSearchDropdown = ({\n  options = [],\n  onChange,\n}: {\n  options?: Array<{\n    key: string;\n    value: string;\n    name: string;\n  }>;\n  onChange?: (value: string) => void;\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [selected, setSelected] = useState(0);\n\n  useClickAway(dropdownRef, () => visible && setVisible(false));\n\n  let keyList = options.reduce((prev, curr) => {\n    return prev.concat(curr.key);\n  }, [] as Array<string>);\n  // @ts-ignore\n  keyList = [...new Set(keyList)];\n\n  useEffect(() => {\n    const query = qs.parse(location.search || '', {\n      ignoreQueryPrefix: true,\n    });\n    const realValue2 = options.reduce((prev, curr, index) => {\n      if (query[curr.key] === curr.value) {\n        return index;\n      }\n      return prev;\n    }, 0);\n    setSelected(realValue2);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  const handleClick = (index: number) => {\n    setVisible(false);\n\n    const option = options[index];\n    if (!option) return;\n\n    if (onChange) {\n      onChange(option.value);\n    } else {\n      let { skip, ...query } = qs.parse(location.search || '', {\n        ignoreQueryPrefix: true,\n      });\n      let queryValue = '';\n\n      keyList.forEach(k => {\n        if (k === option.key) {\n          queryValue = query[k] as string;\n        }\n        delete query[k];\n      });\n\n      if (queryValue !== option.value) {\n        query[option.key] = option.value;\n        history.push(\n          `${location.pathname}${qs.stringify(\n            {\n              skip: '0',\n              ...query,\n            },\n            {\n              addQueryPrefix: true,\n            },\n          )}`,\n        );\n      }\n    }\n  };\n\n  return (\n    <div className=\"relative inline-block ml-0.5714rem\">\n      <Button type=\"icon\" onClick={() => setVisible(!visible)}>\n        <span className=\"i-material-symbols:more-horiz text-18px\"></span>\n      </Button>\n      {visible && (\n        <div\n          className={clsx(\n            'option-container',\n            'absolute right-0 rounded-0.14rem bg-#fff w-max mt-0.7143rem z-10 lt-sm:right-unset lt-sm:left-0',\n          )}\n          style={{\n            boxShadow: '0rem 0.43rem 1.14rem 0rem rgba(20, 27, 50, 0.08)',\n          }}\n          ref={dropdownRef}\n        >\n          {options.map((o, index) => (\n            <div\n              key={o.value}\n              onClick={() => handleClick(index)}\n              className={clsx(\n                'opt',\n                'flex-vertical-center justify-between lh-1.57rem py-0.29rem px-1.14rem cursor-pointer hover:bg-#f1f4f6',\n                selected === index\n                  ? 'text-[var(--theme-color-primary)]'\n                  : 'text-#65709a',\n              )}\n            >\n              <span>{o.name}</span>\n              {selected === index && (\n                <span className=\"i-material-symbols:check-small-rounded text-28px ml-0.5rem\"></span>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;;;;;;;AAAA,OAAO,QAAQ;AACf,SAAgB,UAAU,QAAQ,iBAAiB;AACnD,SAAS,aAAa,kBAAkB;AACxC,SAAS,oBAAoB;AAC7B,OAAO,UAAU;AA2GT,cAcI,YAdJ;AAhFD,IAAM,sBAAsB,CAAC;AAAA,EAClC,UAAU,CAAC;AAAA,EACX;AACF,MAOM;AACJ,QAAM,UAAU,WAAW;AAC3B,QAAM,WAAW,YAAY;AAC7B,QAAM,cAAc,OAAuB,IAAI;AAC/C,QAAM,CAAC,SAAS,UAAU,IAAI,SAAkB,KAAK;AACrD,QAAM,CAAC,UAAU,WAAW,IAAI,SAAS,CAAC;AAE1C,eAAa,aAAa,MAAM,WAAW,WAAW,KAAK,CAAC;AAE5D,MAAI,UAAU,QAAQ,OAAO,CAAC,MAAM,SAAS;AAC3C,WAAO,KAAK,OAAO,KAAK,GAAG;AAAA,EAC7B,GAAG,CAAC,CAAkB;AAEtB,YAAU,CAAC,GAAG,IAAI,IAAI,OAAO,CAAC;AAE9B,YAAU,MAAM;AACd,UAAM,QAAQ,GAAG,MAAM,SAAS,UAAU,IAAI;AAAA,MAC5C,mBAAmB;AAAA,IACrB,CAAC;AACD,UAAM,aAAa,QAAQ,OAAO,CAAC,MAAM,MAAM,UAAU;AACvD,UAAI,MAAM,KAAK,GAAG,MAAM,KAAK,OAAO;AAClC,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,GAAG,CAAC;AACJ,gBAAY,UAAU;AAAA,EAExB,GAAG,CAAC,SAAS,MAAM,CAAC;AAEpB,QAAM,cAAc,CAAC,UAAkB;AACrC,eAAW,KAAK;AAEhB,UAAM,SAAS,QAAQ,KAAK;AAC5B,QAAI,CAAC;AAAQ;AAEb,QAAI,UAAU;AACZ,eAAS,OAAO,KAAK;AAAA,IACvB,OAAO;AACL,UAAI,EAAE,MAAM,GAAG,MAAM,IAAI,GAAG,MAAM,SAAS,UAAU,IAAI;AAAA,QACvD,mBAAmB;AAAA,MACrB,CAAC;AACD,UAAI,aAAa;AAEjB,cAAQ,QAAQ,OAAK;AACnB,YAAI,MAAM,OAAO,KAAK;AACpB,uBAAa,MAAM,CAAC;AAAA,QACtB;AACA,eAAO,MAAM,CAAC;AAAA,MAChB,CAAC;AAED,UAAI,eAAe,OAAO,OAAO;AAC/B,cAAM,OAAO,GAAG,IAAI,OAAO;AAC3B,gBAAQ;AAAA,UACN,GAAG,SAAS,QAAQ,GAAG,GAAG;AAAA,YACxB;AAAA,cACE,MAAM;AAAA,cACN,GAAG;AAAA,YACL;AAAA,YACA;AAAA,cACE,gBAAgB;AAAA,YAClB;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SACE,qBAAC,SAAI,WAAU,sCACb;AAAA,wBAAC,kBAAO,MAAK,QAAO,SAAS,MAAM,WAAW,CAAC,OAAO,GACpD,8BAAC,UAAK,WAAU,2CAA0C,GAC5D;AAAA,IACC,WACC;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA;AAAA,QACF;AAAA,QACA,OAAO;AAAA,UACL,WAAW;AAAA,QACb;AAAA,QACA,KAAK;AAAA,QAEJ,kBAAQ,IAAI,CAAC,GAAG,UACf;AAAA,UAAC;AAAA;AAAA,YAEC,SAAS,MAAM,YAAY,KAAK;AAAA,YAChC,WAAW;AAAA,cACT;AAAA,cACA;AAAA,cACA,aAAa,QACT,sCACA;AAAA,YACN;AAAA,YAEA;AAAA,kCAAC,UAAM,YAAE,MAAK;AAAA,cACb,aAAa,SACZ,oBAAC,UAAK,WAAU,8DAA6D;AAAA;AAAA;AAAA,UAZ1E,EAAE;AAAA,QAcT,CACD;AAAA;AAAA,IACH;AAAA,KAEJ;AAEJ;","names":[]}